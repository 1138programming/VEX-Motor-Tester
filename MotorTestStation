#pragma config(I2C_Usage, I2C1, i2cSensors)
#pragma config(Sensor, dgtl1,  button,         sensorTouch)
#pragma config(Sensor, dgtl2,  encoder,        sensorQuadEncoder)
#pragma config(Sensor, dgtl6,  LED4,           sensorLEDtoVCC)
#pragma config(Sensor, dgtl8,  LED3,           sensorLEDtoVCC)
#pragma config(Sensor, dgtl10, LED2,           sensorLEDtoVCC)
#pragma config(Sensor, dgtl12, LED,            sensorLEDtoVCC)
#pragma config(Sensor, I2C_1,  ,               sensorQuadEncoderOnI2CPort,    , AutoAssign )
#pragma config(Motor,  port1,           TestMotor,     tmotorVex393_HBridge, openLoop, encoderPort, I2C_1)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

float rps = 0;
int iterations = 5;
float rpsReadings[5] = {0, 0, 0, 0, 0};
string type = "";
string IME = "";
int count = 0;
string offset = 0;

const short leftButton = 1;
const short centerButton = 2;
const short rightButton = 4;

void average()
{
	rps = 0;
	for(int a = 0; a < 5; a++)
		rps += abs(rpsReadings[a]);
	offset = abs(round(rps - getMotorEncoder(TestMotor)));
	rps /= 5;
}

void waitForRelease()
{
	while(nLCDButtons != 0){}
	wait1Msec(5);
}

void waitForPress()
{
	while(nLCDButtons == 0){}
	wait1Msec(5);
}

void getMotorType()
{
	iterations = 0;
	motor[TestMotor] = 127;
	clearTimer(T1);
	SensorValue(encoder) = 0;
	resetMotorEncoder(TestMotor);
	clearLCDLine(0);
	clearLCDLine(1);
	displayLCDCenteredString(0, "Testing...");
	while(iterations != 5)
	{
		if(time1[T1] >= 1000)
		{
			rpsReadings[iterations] = SensorValue[encoder];
			iterations++;
			clearTimer(T1);
			SensorValue(encoder) = 0;
		}
	}
	motor[TestMotor] = 0;
	average();
	if(rps > 0 && rps <= 799)
		type = "Torque";
	else if(rps >= 800 & rps <= 1199)
		type = "Speed";
	else if(rps >= 1200)
		type = "Turbo";
	else
		type = "NA";
	if(abs(getMotorEncoder(port1)) > 0)
		IME = "<--IME: Found-->";
	else
		IME = "<-- IME: 404";
	if(IME = "<--IME: Found-->")
	{

	}
	wait1Msec(5);
	count = 1;
}


task main()
{
	clearTimer(T1);
	clearTimer(T2);
	resetMotorEncoder(port1);
	while(true)
	{
		clearLCDLine(0);
		clearLCDLine(1);
		switch(count) {
			case 0:
				displayLCDCenteredString(0, "Center Button to");
				if(type == "")
					displayLCDCenteredString(1, "Test");
				else
					displayLCDString(1, 4, "--Test-Info>");
				waitForPress();
				if(nLCDButtons == rightButton && type != "")
				{
					waitForRelease();
					count++;
				} else if(nLCDButtons == centerButton)
				{
					waitForRelease();
					getMotorType();
				}
				break;
			case 1:
				displayLCDCenteredString(0, type);
				displayLCDString(1, 0, IME);
				waitForPress();
				if(nLCDButtons == rightButton && IME == "<--IME: Found-->")
				{
					waitForRelease();
					count++;
			  } else if(nLCDButtons == leftButton)
			  {
			  	waitForRelease();
					count--;
				} else if(nLCDButtons == centerButton)
				{
					waitForRelease();
					getMotorType();
				}
				break;
			case 2:
				displayLCDCenteredString(0, "IME Offset:");
				displayLCDCenteredString(1, offset);
				if(nLCDButtons == leftButton || IME != "<--IME: Found-->")
				{
					waitForRelease();
					count--;
				} else if(nLCDButtons == centerButton)
				{
					waitForRelease();
					getMotorType();
				}
				break;
		}
	}
}
